import React, { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { fetchMedia } from '../api/mediaApi';
import { Grid, List } from 'lucide-react';

interface MediaListProps {
  viewMode: 'grid' | 'list';
  setViewMode: (mode: 'grid' | 'list') => void;
}

const MediaList: React.FC<MediaListProps> = ({ viewMode, setViewMode }) => {
  const [page, setPage] = useState(1);
  const pageSize = 10;
  const [selectedFolderId, setSelectedFolderId] = useState<number | null>(null);

  const { data, isLoading, error } = useQuery({
    queryKey: ['media', page, pageSize, selectedFolderId],
    queryFn: () => fetchMedia(page, pageSize, selectedFolderId),
  });

  const handleFolderClick = (folderId: number) => {
    setSelectedFolderId(folderId);
    setPage(1); // Reset page when changing folders
  };

  const clearFolderSelection = () => {
    setSelectedFolderId(null);
    setPage(1);
  };

  if (isLoading) return <div className="text-center p-4">Loading...</div>; 
  if (error) return <div className="text-center p-4 text-red-500">Error loading media</div>;

  return (
    <div className="p-4">
      {/* View mode toggle */}
      <div className="flex justify-between items-center mb-4">
        <button 
          onClick={clearFolderSelection} 
          className={`text-blue-600 hover:text-blue-800 ${!selectedFolderId ? 'hidden' : ''}`}
        >
          ‚Üê Back to Folders
        </button>
        <div className="flex gap-2">
          <button
            onClick={() => setViewMode('list')}
            className={`p-2 rounded ${viewMode === 'list' ? 'bg-blue-100' : ''}`}
          >
            <List className="w-5 h-5" />
          </button>
          <button
            onClick={() => setViewMode('grid')}
            className={`p-2 rounded ${viewMode === 'grid' ? 'bg-blue-100' : ''}`}
          >
            <Grid className="w-5 h-5" />
          </button>
        </div>
      </div>

      {/* Folders/Files Display */}
      <div className={viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4' : 'space-y-2'}>
        {!selectedFolderId ? (
          // Show folders
          data?.folders?.map((folder: any) => (
            <div
              key={folder.id}
              onClick={() => handleFolderClick(folder.id)}
              className={`cursor-pointer hover:bg-gray-100 rounded-lg transition-colors ${
                viewMode === 'grid'
                  ? 'p-4 border rounded-lg'
                  : 'p-2 flex items-center space-x-2'
              }`}
            >
              <div className="flex items-center space-x-2">
                <FolderIcon className="w-6 h-6 text-gray-600" />
                <span>{folder.name}</span>
              </div>
            </div>
          ))
        ) : (
          // Show files for selected folder
          data?.files?.map((file: any) => (
            <div
              key={file.id}
              className={`${
                viewMode === 'grid'
                  ? 'p-4 border rounded-lg'
                  : 'p-2 flex items-center space-x-2 border-b'
              }`}
            >
              <div className="flex items-center space-x-2">
                <FileIcon className="w-6 h-6 text-gray-600" />
                <span>{file.name}</span>
              </div>
            </div>
          ))
        )}
      </div>

      {/* Pagination */}
      <div className="mt-4 flex justify-center space-x-2">
        <button
          onClick={() => setPage(p => Math.max(1, p - 1))}
          disabled={page === 1}
          className="px-4 py-2 border rounded disabled:opacity-50"
        >
          Previous
        </button>
        <span className="px-4 py-2">Page {page}</span>
        <button
          onClick={() => setPage(p => p + 1)}
          disabled={!data?.hasMore}
          className="px-4 py-2 border rounded disabled:opacity-50"
        >
          Next
        </button>
      </div>
    </div>
  );
};

export default MediaList;